#!/usr/bin/env python3
import os
import sys

ZCODE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ZCODE_PATH not in sys.path:
    sys.path.insert(0, ZCODE_PATH)

import argparse
from zutils.rpyc_serializing_interface import plac
from z_python_utils.classes import load_obj_from_file


import logging
logging.basicConfig(
    format='%(asctime)s [%(levelname)-8s] %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger()


def main():
    parser = argparse.ArgumentParser(
        description="ZCode Generic RPyC Runner for python function"
    )
    parser.add_argument(
        "--immediate-exit", action="store_true",
        help="if specified, exit immediately via the system call. Do wait for thread/processes to join"
    )
    parser.add_argument(
        "--package", "-P", dest="package", action='append', default=[],
        help="all the paths to be included for python package search"
    )
    parser.add_argument(dest="function_spec", type=str, help="[ModuleName/FileName].[FunctionName]")

    client_cmd_args = []
    func_cmd_args = []
    active_args = client_cmd_args
    for a in sys.argv[1:]:
        active_args.append(a)
        if active_args is client_cmd_args and not a.startswith("-"):
            active_args = func_cmd_args

    args = parser.parse_args(client_cmd_args)

    package_dirs = list(args.package)
    func = load_obj_from_file(args.function_spec, package_dirs=package_dirs)
    plac.call(func, func_cmd_args)
    if args.immediate_exit:
        os._exit(0)


if __name__ == "__main__":
    main()
